data=read.csv(".\Death Row Data.csv")
data=read.csv(".\\Death Row Data.csv")
data
source('D:/Projects/Death-Row/DeathRowAnalysis.R', echo=TRUE)
require(tm)
require('tm')
require('tm')==True
lapply(pckgs, funcion(x): x in installed.packages {print x})
func <- function(x){
if(is.element(x, installed.packages))
{print(x)}
}
lapply(pckgs, func)
pckgs = c("tm", "lsa", "tsne")
func <- function(x){
if(is.element(x, installed.packages))
{print(x)}
}
lapply(pckgs, func)
pcks
pckgs
pckgs[1]
is.element(x, installed.packages)
is.element('tm', installed.packages)
is.element(['tm'], installed.packages)
is.element('tm', [installed.packages])
installed.packages
installed.packages()
installed.packages().class()
installed.packages().class
Class(installed.packages())
class(installed.packages())
installed.packages()[0]
installed.packages()[0,]
installed.packages()[1,]
installed.packages()[,1]
installed.packages().names()
installed.packages().names
installed.packages()[0]
installed.packages()[,1]
rownames(installed.packages())
pckgs = c("tm", "lsa", "tsne")
func <- function(x){
if(is.element(x, rownames(installed.packages())))
{print(x)}
}
lapply(pckgs, func)
func('tm')
pckgs = c("tm", "lsa", "tsne")
func <- function(x){
if(!is.element(x, rownames(installed.packages())))
{print(x)}
}
lapply(pckgs, func)
func(pckgs)
func(pckgs[1])
func(pckgs[2])
func(pckgs[3])
lapply(pckgs, func)
lapply(pckgs, func, simplify=FALSE)
pckgs = c("tm", "lsa", "tsne")
func <- function(x){
if(!is.element(x, rownames(installed.packages())))
{print(x)}
}
lapply(pckgs, func, simplify=FALSE)
pckgs = list("tm", "lsa", "tsne")
func <- function(x){
if(!is.element(x, rownames(installed.packages())))
{print(x)}
}
lapply(pckgs, func)
pckgs = list("tm", "lsa", "tsne")
func <- function(x){
if(!is.element(x, rownames(installed.packages())))
{return(x)}
}
lapply(pckgs, func)
pckgs = list("tm", "lsa", "tsne")
func <- function(x){
if(!is.element(x, rownames(installed.packages())))
{install.packages(x)}
}
lapply(pckgs, func)
#Death row inmates R analysis
pckgs = list("tm", "lsa", "tsne")
func <- function(x){
if(!is.element(x, rownames(installed.packages())))
{install.packages(x)}
}
lapply(pckgs, func)
data=read.csv(".\\Death Row Data.csv")
dataset=DataframeSource(data[1])
mycorpus<-Corpus(dataset, readerControl=list(language="eng", reader=readPlain))
mycorpus <- tm_map(mycorpus, removePunctuation)
mycorpus <- tm_map(mycorpus, removeNumbers)
mycorpus <- tm_map(mycorpus, stemDocument)
stopwordseng=stopwords(kind = "en")
mycorpus <- tm_map(mycorpus, removeWords, stopwordseng)
mycorpus <- tm_map(mycorpus, content_transformer(tolower))
#getTransformations() to see your options!!!
TDM=TermDocumentMatrix(mycorpus)
TDMred=removeSparseTerms(TDM, 0.9)
findFreqTerms(TDM, 30)
findAssocs(TDM, "jesus", 0.3)
TDMMat<-as.matrix(TDMred)
head(TDMMat[,1:2]) #sees beginning of first 2 documents only
LSAOBJ=lsa(TDMMat)
TK=as.matrix(as.data.frame(LSAOBJ[1]))
DK=as.matrix(as.data.frame(LSAOBJ[2]))
SK=as.matrix(as.data.frame(LSAOBJ[3]))
#make SK diagonal matrix
SK=diag(SK[,1])
dim(TK) #Note the dimensions!
#[1] 53 13
dim(SK)
#[1] 13  13
dim(DK)
#[1] 495  13
dim(TDM2)
#[1]  53 495
MK=TK%*%SK%*%t(DK)
#compare the reconstruction
TDMred=as.matrix(TDMred)
head(as.matrix(TDMred))
head(MK)
#Now lets reconstruct document 1 using this
recon=solve(SK)%*%t(TK)%*%TDMred[,1]
recon2=solve(SK)%*%t(TK)%*%TDMred[,2]
#compare cosine of original docs and reconstruction
cosine(as.vector(recon),as.vector(recon2))
cosine(as.vector(TDMred[,1]),as.vector(TDMred[,2]))
cosine(as.vector(MK[,1]),as.vector(MK[,2]))
#Reduced the dimensionality from 53 to 13.
recon=solve(SK)%*%t(TK)%*%TDMred
KMEANSTEST=kmeans(t(recon),2)
data=as.vector(data)
racecluster1=data[,7][unlist(KMEANSTEST[1])==1]
racecluster2=data[,7][unlist(KMEANSTEST[1])==2]
summary(racecluster1) #Is race causing this cluster?
summary(racecluster2)
countycluster1=data[,8][unlist(KMEANSTEST[1])==1]
countycluster2=data[,8][unlist(KMEANSTEST[1])==2]
summary(countycluster1) #Is county affecting this cluster?
summary(countycluster2)
year=substr(data[,6],7,10) #Gets the year
yearcluster1=year[unlist(KMEANSTEST[1])==1]
yearcluster2=year[unlist(KMEANSTEST[1])==2]
summary(factor(yearcluster1))
summary(factor(yearcluster2))
TDMC1=TDMMat[,unlist(KMEANSTEST[1])==1]
TDMC2=TDMMat[,unlist(KMEANSTEST[1])==2]
#Another cool way to cluster the data!
test=tsne(t(TDMred),k=2)
KMEANSTEST=kmeans(test,2)
plot(test)
points(as.matrix(as.data.frame(KMEANSTEST[2])),col='red')
data()
data[1]
data=read.csv(".\\Death Row Data.csv")
data
pckgs = list("tm", "lsa", "tsne")
func <- function(x){
if(!is.element(x, rownames(installed.packages())))
{install.packages(x)
library(x)}
else
{library(x)}
}
lapply(pckgs, func)
pckgs
pckgs[1]
pckgs[2]
library(pckgs[2])
library(c(pckgs[2])
)
pckgs = list("tm", "lsa", "tsne")
func <- function(x){
if(!is.element(x, rownames(installed.packages())))
{install.packages(x)
require(x)}
else
{require(x)}
}
lapply(pckgs, func)
require(pckgs)
library(pckgs)
library(pckgs, character.only=TRUE)
lapply(pckgs, library, character.only=TRUE)
data=read.csv(".\\Death Row Data.csv")
dataset=DataframeSource(data[1])
mycorpus<-Corpus(dataset, readerControl=list(language="eng", reader=readPlain))
mycorpus <- tm_map(mycorpus, removePunctuation)
mycorpus <- tm_map(mycorpus, removeNumbers)
mycorpus <- tm_map(mycorpus, stemDocument)
stopwordseng=stopwords(kind = "en")
mycorpus <- tm_map(mycorpus, removeWords, stopwordseng)
mycorpus <- tm_map(mycorpus, content_transformer(tolower))
TDM=TermDocumentMatrix(mycorpus)
TDMred=removeSparseTerms(TDM, 0.9)
findFreqTerms(TDM, 30)
findAssocs(TDM, "jesus", 0.3)
TDMMat<-as.matrix(TDMred)
head(TDMMat[,1:2]) #sees beginning of first 2 documents only
LSAOBJ=lsa(TDMMat)
TK=as.matrix(as.data.frame(LSAOBJ[1]))
DK=as.matrix(as.data.frame(LSAOBJ[2]))
SK=as.matrix(as.data.frame(LSAOBJ[3]))
SK=diag(SK[,1])
dim(TK) #Note the dimensions!
dim(SK)
dim(DK)
dim(TDM2)
MK=TK%*%SK%*%t(DK)
TDMred=as.matrix(TDMred)
head(as.matrix(TDMred))
head(MK)
recon=solve(SK)%*%t(TK)%*%TDMred[,1]
recon2=solve(SK)%*%t(TK)%*%TDMred[,2]
cosine(as.vector(recon),as.vector(recon2))
cosine(as.vector(TDMred[,1]),as.vector(TDMred[,2]))
cosine(as.vector(MK[,1]),as.vector(MK[,2]))
recon=solve(SK)%*%t(TK)%*%TDMred
KMEANSTEST=kmeans(t(recon),2)
data=as.vector(data)
racecluster1=data[,7][unlist(KMEANSTEST[1])==1]
racecluster2=data[,7][unlist(KMEANSTEST[1])==2]
summary(racecluster1) #Is race causing this cluster?
summary(racecluster2)
countycluster1=data[,8][unlist(KMEANSTEST[1])==1]
countycluster2=data[,8][unlist(KMEANSTEST[1])==2]
summary(countycluster1) #Is county affecting this cluster?
summary(countycluster2)
year=substr(data[,6],7,10) #Gets the year
yearcluster1=year[unlist(KMEANSTEST[1])==1]
yearcluster2=year[unlist(KMEANSTEST[1])==2]
summary(factor(yearcluster1))
summary(factor(yearcluster2))
TDMC1=TDMMat[,unlist(KMEANSTEST[1])==1]
TDMC2=TDMMat[,unlist(KMEANSTEST[1])==2]
test=tsne(t(TDMred),k=2)
KMEANSTEST=kmeans(test,2)
plot(test)
points(as.matrix(as.data.frame(KMEANSTEST[2])),col='red')
